
--[[

Commented config options are not yet active.

Config Descriptions
hasStrongbox: set to true if you have access to Thermal Expansion strongbox
-reinforced or better strongbox recommended

voidCobble: set to true if you want all cobblestone deleted from loots
-recommended if you have a smaller strongbox, or don't need extra cobblestone

aggressiveMove: set to true if you want turtle to attack if entity blocks path
-turn off if you tend to run close behind turtle

craftTorches: set to true if you want the turtle to craft extra torches
-recommended to turn off if you have access to strongboxes

fuelCheck: set to true if you want turtle to not begin without enough fuel
-turtle uses 5000 fuel per run

wireless: set to true if you want turtle to update status wirelessly
-use with wireless pocket computer or terminal glasses

--]]

--Handles forward motion, executes anti-blocking behavior
function moveF()
	while not turtle.forward() do
		if turtle.detect() then
			turtle.dig() 
		else
			if aggressiveMove then
				turtle.attack()
			end
		end
		sleep(.5)
	end
end

function move(dir)
	if dir == "down" then
		while not turtle.down() do
			turtle.down()
			end
	else if dir == "up" then
		while not turtle.up() do
			turtle.up()
			end
		end
	end
end

--Handles digging of paths, prevents gravel blocking
function digForward()
	while turtle.detect() do
		turtle.dig()
		sleep(.5)
		end
	moveF()
	while turtle.detectUp() do
		turtle.digUp()
		sleep(.5)
	end
	turtle.digDown()
	if turtle.getItemCount(16) > 0 then
		loot()
		end
	end

--Handles digging of initial mineshaft and central chamber
function shaft(current, target)
while current >= target do
	turtle.digDown()
	move("down")
	current = current - 1
end
turtle.digDown()
turtle.placeDown()
digForward()
turtle.turnLeft()
for i = 1, 3 do
	digForward()
	turtle.turnLeft()
	digForward()
end
digForward()
turtle.back()
turtle.turnLeft()
turtle.forward()
end

--Handles emptying turtle inventory into specified loot containers
function loot()
	turtle.select(3)
	turtle.placeDown()
	chest = peripheral.wrap("bottom")
	for i = 5, 16 do
		turtle.select(i)
		turtle.dropDown()
		end
	turtle.select(3)
	turtle.digDown()
	turtle.select(4)
	turtle.placeUp()
	turtle.select(1)
	turtle.suckUp(turtle.getItemSpace())
	turtle.digUp()
end

--Handles clearing main shafts, ensures floor is walkable
function path()
for i = 1, 36 do
	digForward()
end
loot()
move("down")
turtle.turnLeft()
turtle.turnLeft()
turtle.select(2)
for i = 1, 35 do
	if not turtle.detectDown() then
		turtle.placeDown()
	end
	moveF()
end
move("up")
moveF()
turtle.turnLeft()
turtle.turnLeft()
turtle.select(1)
end

--Handles digging of branch shafts
function branch()
for i = 1, 3 do
	digForward()
end
turtle.placeDown()
turtle.turnLeft()

for d = 1, 40 do
	digForward()
end
loot()
turtle.placeUp()
move("down")
turtle.turnLeft()
turtle.turnLeft()
turtle.select(2)
for d = 1, 39 do
	moveF()
	if d % 8 == 0 then
		turtle.select(1)
		move("up")
		turtle.placeUp()
		move("down")
		turtle.select(2)
	end
    if not turtle.detectDown() then
		turtle.placeDown()
	end
end
move("up")
moveF()
turtle.turnLeft()
turtle.select(1)
end

--Handles turtle returning to central chamber after a main shaft is complete
function returnToStation()
t = 0
turtle.turnLeft()
turtle.turnLeft()
while t < 12 do
	moveF()
	if turtle.detectDown() then
		turtle.digDown()
		t = t + 1
	end
end
turtle.turnLeft()
turtle.placeDown()
end

--Main code body
fuel = turtle.getFuelLevel()
if fuelCheck and fuel < 5000 then
	needed = 5000 - fuel
	print("Not enough fuel! I need " .. needed .. " more.\n(" .. math.ceil(needed / 80) .. " coal)")
	return
	end
term.clear()
term.setCursorPos(1,1)
write("Enter current Y: ")
current = tonumber(read())
write("Enter target Y: ")
target = tonumber(read())
shaft(current, target)
for s = 1, 4 do
	path()
	for i = 1, 12 do 
		branch()
	end
	returnToStation()
end