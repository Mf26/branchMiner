
--[[

Commented config options are not yet active.

Config Descriptions
hasStrongbox: set to true if you have access to Thermal Expansion strongbox
-recommended to use reinforced or better

voidCobble: set to true if you want all cobblestone deleted from loots
-recommended if you have a smaller strongbox, or don't need extra cobblestone

aggressiveMove: set to true if you want turtle to attack if entity blocks path
-recommended to turn off if you run close behind turtle

craftTorches: set to true if you want the turtle to craft extra torches
-recommended to turn off if you have access to strongboxes

fuelCheck: set to true if you want turtle to not begin without enough fuel
-recommended
--]]

--Handles forward motion, executes anti-blocking behavior
function move()
while not turtle.forward() do
	if turtle.detect() then
		turtle.dig() 
	else
		if aggressiveMove then
			turtle.attack()
		end
end
	sleep(.5)
end
end

--Handles digging of paths, prevents gravel blocking
function digForward()
while turtle.detect() do
	turtle.dig()
	sleep(.5)
end
move()
while turtle.detectUp() do
	turtle.digUp()
	sleep(.5)
end
turtle.digDown()
end

--Handles digging of initial mineshaft and central chamber
function shaft(depth)
while depth >= 14 do
	turtle.digDown()
	turtle.down()
	depth = depth - 1
end
turtle.digDown()
turtle.placeDown()
digForward()
turtle.turnLeft()
for i = 1, 3 do
	digForward()
	turtle.turnLeft()
	digForward()
end
digForward()
turtle.back()
turtle.turnLeft()
turtle.forward()
end

--Handles emptying turtle inventory into specified loot containers
function loot()
turtle.select(3)
turtle.placeDown()
for i = 5, 16 do
	turtle.select(i)
	turtle.dropDown()
end
turtle.select(3)
turtle.digDown()
turtle.select(4)
turtle.placeDown()
turtle.select(1)
turtle.suckDown(turtle.getItemSpace())
turtle.digDown()
end

--Handles clearing main shafts, ensures floor is walkable
function path()
for i = 1, 36 do
	digForward()
end
turtle.down()
turtle.turnLeft()
turtle.turnLeft()
turtle.select(2)
for i = 1, 35 do
	if not turtle.detectDown() then
		turtle.placeDown()
	end
	move()
end
turtle.up()
move()
turtle.turnLeft()
turtle.turnLeft()
turtle.select(1)
end

--Handles digging of branch shafts
function branch()
for i = 1, 3 do
	digForward()
end
turtle.placeDown()
turtle.turnLeft()

for d = 1, 40 do
	digForward()
end
turtle.placeUp()
turtle.down()
turtle.turnLeft()
turtle.turnLeft()
turtle.select(2)
loot()
for d = 1, 39 do
	move()
	if d % 8 == 0 then
		turtle.select(1)
		turtle.up()
		turtle.placeUp()
		turtle.down()
		turtle.select(2)
	end
    if not turtle.detectDown() then
		turtle.placeDown()
	end
end
turtle.up()
move()
turtle.turnLeft()
turtle.select(1)
end

--Handles turtle returning to central chamber after a main shaft is complete
function returnToStation()
t = 0
turtle.turnLeft()
turtle.turnLeft()
while t < 12 do
	move()
	if turtle.detectDown() then
		turtle.digDown()
		t = t + 1
	end
end
turtle.turnLeft()
turtle.placeDown()
end

--Main code body
if fuelCheck && turtle.getFuelLevel() < 5000 then
	print("Not enough fuel! I need " .. 5000 - turtle.getFuelLevel() .. "more units.")
	return
	end
term.clear()
term.setCursorPos(1,1)
write("Enter current Y: ")
shaft(tonumber(read()))
for s = 1, 4 do
	path()
	for i = 1, 12 do 
		branch()
	end
	returnToStation()
end