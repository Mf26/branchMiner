--[[

Commented config options are not yet active.

Config Descriptions
hasStrongbox: set to true if you have access to Thermal Expansion strongbox
-reinforced or better strongbox recommended

voidCobble: set to true if you want all cobblestone deleted from loots
-recommended if you have a smaller strongbox, or don't need extra cobblestone

aggressiveMove: set to true if you want turtle to attack if entity blocks path
-turn off if you tend to run close behind turtle

craftTorches: set to true if you want the turtle to craft extra torches
-recommended to turn off if you have access to strongboxes

fuelCheck: set to true if you want turtle to not begin without enough fuel
-turtle uses 5000 fuel per run

wireless: set to true if you want turtle to update status wirelessly
-use with wireless pocket computer or terminal glasses

--]]

--Handles forward motion, executes anti-blocking behavior
function moveF()
	while not turtle.forward() do
		if turtle.detect() then
			turtle.dig() 
		elseif aggressiveMove == true then
			turtle.attack()
			end
		end
	sleep(.5)
	end

--Handles forward motion, executes anti-blocking behavior
function moveFNoDig()
	while not turtle.forward() do
		if aggressiveMove then
			turtle.attack()
			end
		end
	sleep(.5)
	end

function move(dir)
	if dir == "down" then
		while not turtle.down() do
			turtle.down()
			end
	elseif dir == "up" then
		while not turtle.up() do
			turtle.up()
			end
		end
	end

--Handles digging of paths, prevents gravel blocking
function digForward()
	while turtle.detect() do
		turtle.dig()
		sleep(.5)
		end
	moveF()
	while turtle.detectUp() do
		turtle.digUp()
		sleep(.5)
		end
	turtle.digDown()
	if turtle.getItemCount(15) > 0 then
		loot()
		end
	end

--Handles digging of initial mineshaft and central chamber
function shaft(current, target)
	while current >= target do
		turtle.digDown()
		move("down")
		current = current - 1
		end
	turtle.digDown()
	turtle.placeDown()
	digForward()
	turtle.turnLeft()
	for i = 1, 3 do
		digForward()
		turtle.turnLeft()
		digForward()
		end
	digForward()
	turtle.back()
	turtle.turnLeft()
	turtle.forward()
	end

--Handles crafting additional torches. Best used only if you do not have strongboxes.
function craftMoreTorches()
	print("crafting torches")
	foundCoal = false
	for i = 5, 15 do
		currentItem = turtle.getItemDetail(i)
		if currentItem then
			if string.find(currentItem.name, "coal") then
				turtle.select(i)
				turtle.transferTo(16)
				foundCoal = true
				end
			end
		turtle.select(i)
		turtle.dropDown()
		end
	if foundCoal == false then
		return
		end
	torchDemand = turtle.getItemSpace(1)
	turtle.select(16)
	turtle.transferTo(12)
	turtle.select(4)
	turtle.transferTo(16)
	turtle.select(3)
	turtle.placeUp()
	for i = 1, 3 do
		turtle.select(i)
		turtle.dropUp()
		end
	turtle.select(1)
	turtle.craft(math.floor(torchDemand / 4))
	turtle.digUp()
	turtle.select(16)
	turtle.transferTo(4)
	turtle.select(12)
	turtle.dropDown()
	end

--Handles emptying turtle inventory into specified loot containers.
function loot()
	print("dumping loot")
	turtle.select(3)
	turtle.placeDown()
	if craftTorches == true then
		craftMoreTorches()
	elseif craftTorches == false then
		turtle.select(4)
		turtle.placeUp()
		turtle.select(1)
		turtle.suckUp(turtle.getItemSpace())
		turtle.select(4)
		turtle.digUp()
		end
	for i = 5, 16 do
		turtle.select(i)
		turtle.dropDown()
		end
	if hasStrongbox == true then
		turtle.select(3)
		turtle.digDown()
		end
	end

--Handles clearing main shafts, ensures floor is walkable
function path()
	for i = 1, 36 do
		digForward()
		end
	loot()
	turtle.back()
	move("down")
	turtle.turnLeft()
	turtle.turnLeft()
	turtle.select(2)
	for i = 2, 35 do
		if not turtle.detectDown() then
			turtle.placeDown()
			end
		moveF()
		end
	move("up")
	moveF()
	turtle.turnLeft()
	turtle.turnLeft()
	turtle.select(1)
	end

--Handles digging of branch shafts
function branch()
	for i = 1, 3 do
		digForward()
		end
	turtle.placeDown()
	turtle.turnLeft()
	for d = 1, 40 do
		digForward()
		end
	loot()
	turtle.select(1)
	turtle.placeUp()
	turtle.turnLeft()
	turtle.turnLeft()
	print("returning from branch end")
	moveF()
	move("down")
	turtle.select(2)
	for d = 2, 39 do
		moveF()
		if d % 8 == 0 then
			turtle.select(1)
			move("up")
			turtle.placeUp()
			move("down")
			turtle.select(2)
			end
		if not turtle.detectDown() then
			turtle.placeDown()
			end
		end
	move("up")
	moveF()
	turtle.turnLeft()
	turtle.select(1)
	end

--Handles turtle returning to central chamber after a main shaft is complete
function returnToStation()
	turtle.turnLeft()
	turtle.turnLeft()
	for i = 1, 36 do
		moveFNoDig()
		end
	turtle.turnLeft()
	end

--Main code body
fuel = turtle.getFuelLevel()
if fuelCheck == true and fuel < 5000 then
	needed = 5000 - fuel
	print("Not enough fuel! I need " .. needed .. " more.\n(" .. math.ceil(needed / 80) .. " coal)")
	return
	end
term.clear()
term.setCursorPos(1,1)
write("Enter current Y: ")
current = tonumber(read())
write("Enter target Y: ")
target = tonumber(read())
shaft(current, target)
for mainShaft = 1, 4 do
	print("digging main shaft number:" .. mainShaft)
	path()
	for branchShaft = 1, 12 do 
		print("digging branch shaft number:" .. branchShaft)
		branch()
		end
	returnToStation()
	end